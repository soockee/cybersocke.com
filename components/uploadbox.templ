package components

templ UploadBox(csrfToken string) {
	<div id="upload-area" class="upload-area">
		<p>Drag and drop a markdown file here or click to upload</p>
		<input type="file" id="file-input" accept=".md" style="display:none"/>
		<!-- CSRF token for JS access -->
		<input type="hidden" id="csrf-token" value={ csrfToken }/>
	</div>
	<script type="module">
		const uploadArea = document.getElementById("upload-area");
		const fileInput = document.getElementById("file-input");
		const csrfToken = document.getElementById("csrf-token").value;

		uploadArea.addEventListener("click", () => fileInput.click());

		uploadArea.addEventListener("dragover", (e) => {
			e.preventDefault();
			uploadArea.classList.add("drag-over");
		});

		uploadArea.addEventListener("dragleave", () => {
			uploadArea.classList.remove("drag-over");
		});

		uploadArea.addEventListener("drop", (e) => {
			e.preventDefault();
			uploadArea.classList.remove("drag-over");
			handleFile(e.dataTransfer.files[0]);
		});

		fileInput.addEventListener("change", (e) => {
			handleFile(e.target.files[0]);
		});

		async function handleFile(file) {
			if (!file || !file.name.endsWith(".md")) {
				alert("Only .md files are allowed.");
				return;
			}

			const formData = new FormData();
			formData.append("file", file);

			try {
				const response = await fetch("/posts", {
					method: "POST",
					headers: {
						"X-CSRF-Token": csrfToken
					},
					body: formData
				});
				if (!response.ok) throw new Error("Upload failed");
				// alert("Upload successful");
			} catch (err) {
				console.error(err);
				// alert("Upload error");
			}
		}
	</script>
	<style>
		.upload-area {
			border: 2px dashed #4caf50;
			padding: 40px;
			text-align: center;
			cursor: pointer;
			border-radius: 8px;
			transition: all 0.2s ease-in-out;
			background-color: #f9f9f9;
			color: #333;
		}

		.upload-area.drag-over {
			background-color: #c8f0d4;
			border-color: #2e7d32;
			box-shadow: 0 0 10px rgba(46, 125, 50, 0.4);
			transform: scale(1.02);
		}
	</style>
}
